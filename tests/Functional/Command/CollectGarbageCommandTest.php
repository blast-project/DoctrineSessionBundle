<?php
namespace Blast\Tests\Functional;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-04-24 at 16:53:17.
 */
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;
use Symfony\Bundle\FrameworkBundle\Console\Application;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\Console\Input\ArrayInput;
use Blast\DoctrineSessionBundle\Command\CollectGarbageCommand;

/*
// prepare database if exists
$file = __DIR__.'/../prepare.database.php';
#if (file_exists()) {
    require_once $file;
#}
*/


class CollectGarbageCommandTest extends BlastDatabaseTest
{
    /**
     * @var CollectGarbageCommand
     */
    protected $object;
    protected $application;
    protected $input;
    protected $output;
   
    protected function setUp()
    {
        $this->createDatabase();
        //        parent::setUp();
        static::bootKernel();
        $this->object = new CollectGarbageCommand();
        $this->application = new Application(self::$kernel);
        $this->application->add($this->object);
    }
    
    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testCommand()
    {
        /*
         * @todo : should add some session before purge test
         * @todo should find a way to test all availlable option
         */
        $this->input = new ArrayInput(array(
            'command' => 'blast:session:collect-garbage',
            '--all' => true,
        ));

        $this->output = new ConsoleOutput();
        
        $this->object->run($this->input, $this->output);


        /*
         * @todo : should check if there are session in database or not
         */


        $this->input = new ArrayInput(array(
            'command' => 'blast:session:collect-garbage',
            'limit' => '3',
        ));

        $this->output = new ConsoleOutput();
        
        $this->object->run($this->input, $this->output);


        
        //        if (function_exists('xdebug_disable')) {
        //    xdebug_disable();
        //    var_dump($this->output);
        // }
    }
}
